# -*- coding: utf-8 -*-
"""Vine_Review_Analysis

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KX_0kPhPyWt6Hv07ZktsKYyIeJ6vXLow
"""

import os
# Find the latest version of spark 3.0 from http://www.apache.org/dist/spark/ and enter as the spark version
# For example:
# spark_version = 'spark-3.0.3'
spark_version = 'spark-3.0.3'
os.environ['SPARK_VERSION']=spark_version

# Install Spark and Java
!apt-get update
!apt-get install openjdk-11-jdk-headless -qq > /dev/null
!wget -q http://www.apache.org/dist/spark/$SPARK_VERSION/$SPARK_VERSION-bin-hadoop2.7.tgz
!tar xf $SPARK_VERSION-bin-hadoop2.7.tgz
!pip install -q findspark

# Set Environment Variables
import os
os.environ["JAVA_HOME"] = "/usr/lib/jvm/java-11-openjdk-amd64"
os.environ["SPARK_HOME"] = f"/content/{spark_version}-bin-hadoop2.7"

# Start a SparkSession
import findspark
findspark.init()

# Download the Postgres driver that will allow Spark to interact with Postgres.
!wget https://jdbc.postgresql.org/download/postgresql-42.2.16.jar

from pyspark.sql import SparkSession
spark = SparkSession.builder.appName("M16-Amazon-Challenge").config("spark.driver.extraClassPath","/content/postgresql-42.2.16.jar").getOrCreate()

"""### Load Amazon Data into Spark DataFrame"""

from pyspark import SparkFiles
url = "https://s3.amazonaws.com/amazon-reviews-pds/tsv/amazon_reviews_us_Video_Games_v1_00.tsv.gz"
spark.sparkContext.addFile(url)
df = spark.read.option("encoding", "UTF-8").csv(SparkFiles.get(""), sep="\t", header=True, inferSchema=True)
df.show()

"""### Create DataFrames to match tables"""

from pyspark.sql.functions import to_date
# Read in the Review dataset as a DataFrame
df = df
df.show()

# Create the vine_table. DataFrame
vine_df = df.select('review_id', 'star_rating', 'helpful_votes', 'vine', 'verified_purchase')
vine_df.show()

new = vine_df.filter('total_votes>=20')
new.show()

next = new.filter('(total_votes / helpful_votes) > .5')
next.show()

good = next.filter('vine =="Y"')
good.show()

bad = next.filter('vine =="N"')
bad.show()

count = good.select('review_id').count()
count

five = good.filter('star_rating = "5"').count()
five

percent = (five/count) * 100
percent

count1 = bad.select('review_id').count()
count1

five1 = bad.filter('star_rating = "5"').count()
five1

percent1 = (five1/count1) * 100
percent1